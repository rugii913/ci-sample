name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main # trigger - main 브랜치 push

jobs:
  deploy: # job 이름
    runs-on: ubuntu-latest # Actions 베이스
    steps:
      - name: Checkout # Checkout 스텝
        uses: actions/checkout@v3

      - name: Set up JDK 17 # JDK 설치 스텝
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew # gradlew 권한 설정
        run: chmod +x ./gradlew

      - name: gradlew bootJar # Gradle bootJar 태스크 실행
        run: ./gradlew bootJar

      - name: copy jar to server # bootJar 태스크로 실행된 jar 파일을 서버 인스턴스에 전송
        uses: appleboy/scp-action@master # scp-action 플러그인
        with:
          host: ${{ secrets.SSH_HOST }} # 전송 호스트
          username: ec2-user # 인스턴스의 username
          key: ${{ secrets.SSH_KEY }} # 통신 시 인증 키
          port: 22 # SSH 사용 포트
          source: "./build/libs/*.jar" # bootJar로 빌드된 이 파일을 전송할 것
          target: "~" # Host에서 받을 경로
          strip_components: 2 # 위 source에서 2개 디렉토리 경로 제거하고 전송

      - name: SSH Commands # jar 파일 전송 후 실행할 스크립트
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }} # SSH 호스트
          username: ec2-user
          key: ${{ secrets.SSH_KEY }} # 통신 시 인증 키
          port: 22 # SSH 사용 포트
          script_stop: true # Stop script after first failure 참고: https://github.com/appleboy/ssh-action
          # 실행할 스크립트
          # 계속 에러 발생하던 부분은 \ 대신에 |이 들어가 있어서 발생했던 듯함
          # AWS 접속한 shell 에서 \ 대신 | 입력하면 shell에서 다음 에러 발생함
          # -bash: syntax error near unexpected token `|'
          script: \
            kill -9 $(ps -ef | grep java | head -n 1 | awk '{print $2}')
            nohup java -jar *.jar 1> /dev/null 2>&1 &
          # - kill -9 $() 부분 관련
          #   - 참고: 리눅스_명령어 kill, ps, grep, awk 함께 사용하기 https://basketdeveloper.tistory.com/49
          #   - ps -ef: 현재 실행 중인 프로세스 표시
          #   - grep [문자열]: 해당 문자열이 포함된 라인을 출력
          #   - head -n 1: -n 옵션 기본 10줄 출력 대신 지정한 행만큼 출력 (참고: https://rhrhth23.tistory.com/30)
          #   - awk '{print $2}': 표준 출력으로부터 2번째 필드 출력 - 즉 PID 값을 가져옴
          # - nohub 뒤 옵션 관련
          #   - nohup 실행파일 1> /dev/null 2>&1 & https://m.blog.naver.com/typeofb/173589212
          #   - [Linux] 프로세스 백그라운드로 실행 시키기 - nohub, & https://spidyweb.tistory.com/523
